var searchIndex = JSON.parse('{\
"switch_selection":{"doc":"Switch selection tool","t":"AAFOOADLLLLLLMLLLLMMMLLLLLLMDDIIIDGLLLKLKLAMMMLLLLLLKLLLLLLLKLKLKLKLKLMKLMALLLKLKLKLKLKLKLKLKLLLLALKLKLKLKLMLMLKLKLLLLALLLLLLLLLLKKLMLLLLIDLLLLLLLLLLLLLLLLMLLLLLLLDLLMLLLLLLLLLLLLAIOOOOOOOOOFKKIKAAAAAIGKKKGFFFGDILLOMLKMLMMLLLMLDLLMLLLLLLLLLLLLDDDDDLLMLLLLLLLLLLLLLLMLMLLLLLLLLLLMLLLLLLMMLLMMLMMMLLLLLLLLLLLLLMLLLLLLLLLLLL","n":["dg_graph","graph","main","pretty_panic","pretty_unwrap","solver","PrimitiveDGGraph","__clone_box","borrow","borrow_mut","check_taps_feasibility","clone","clone_into","core","from","into","junction_network","new","p","q","r","to_owned","try_from","try_into","type_id","unwrap","vzip","x","Edge","Graph","ImmutableGraph","ImmutableGraphWrapper","MutableGraph","Vertex","VertexId","__clone_box","__clone_box","__clone_box","add_edge","add_edge","add_vertex","add_vertex","attribute","attributes","attributes","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_edge","check_edge","clone","clone","clone","clone_into","clone_into","clone_into","connected_components_count","connected_components_count","contract_vertices","contract_vertices","degree","degree","degree_in","degree_in","degree_out","degree_out","directed","edge_count","edge_count","edges","errors","from","from","from","get_edge","get_edge","get_edge_cond","get_edge_cond","get_edge_mut","get_edge_mut","get_vertex","get_vertex","get_vertex_children","get_vertex_children","get_vertex_cond","get_vertex_cond","get_vertex_mut","get_vertex_mut","get_vertex_neighbourhood","get_vertex_neighbourhood","into","into","into","io","is_directed","iter_edge","iter_edge","iter_edge_mut","iter_edge_mut","iter_vertex","iter_vertex","iter_vertex_mut","iter_vertex_mut","neighbourhoods","new","next_free_vertex_id","read_gnbs","remove_edge","remove_edge","remove_vertex","remove_vertex","to_owned","to_owned","to_owned","tree_decomposition","tree_decomposition","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","vertex_count","vertex_count","vertices","vzip","vzip","vzip","write_gnbs","Attribute","AttributeMap","__clone_box","add","borrow","borrow_mut","clone","clone_into","contains","downcast","downcast_mut","from","get","get_mut","get_mut_by_str","into","is","iter","map","new","remove","to_owned","try_from","try_into","type_id","vzip","GraphError","borrow","borrow_mut","description","fmt","fmt","from","from_str","from_string","into","provide","to_string","try_from","try_into","type_id","vzip","gnbs","GNBS","err_ambiguous_attribute_type","err_argument_count_mismatch","err_duplicating_attribute","err_type_mismatch","err_unexpected_attribute_declaration","err_unexpected_eol","err_unexpected_symbol","err_unknown_attribute_type","err_unknown_specifier","parse_attribute_value","read_gnbs","write_gnbs","TreeDecomposition","tree_decomposition","base_solver","benchmark","cplex_solver","errors","tree_decomposition_solver","BaseSolver","TapValue","get_solution","solve","with_input","PRNG","random_partial_k_tree","start_benchmark","timeit","CPLEXSolver","CPLEXSolverCore","CPLEXSolverTools","borrow","borrow_mut","cplex_unwrap","env","from","get_problem_mut","input","into","problem","solution","try_from","try_into","type_id","variables","vzip","SolverError","borrow","borrow_mut","description","fmt","fmt","from","from_str","from_string","into","provide","to_string","try_from","try_into","type_id","vzip","DirectedTreeDecomposition","TapsMemo","TapsMemoEntry","ThreadData","TreeDecompositionSolver","__clone_box","__clone_box","bag_id","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","dfs_postordering","dtd","eq","equivalent","from","from","from","from","from","get_root_id","get_solution","hash","input","intersect","into","into","into","into","into","join_handle","memos","new","new","obj_value","primary_substations","solve","table","taps","thread_count","thread_workload","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","unwrap","vzip","vzip","vzip","vzip","vzip","with_input"],"q":[[0,"switch_selection"],[6,"switch_selection::dg_graph"],[28,"switch_selection::graph"],[137,"switch_selection::graph::attribute"],[163,"switch_selection::graph::errors"],[179,"switch_selection::graph::io"],[180,"switch_selection::graph::io::gnbs"],[193,"switch_selection::graph::tree_decomposition"],[195,"switch_selection::solver"],[200,"switch_selection::solver::base_solver"],[205,"switch_selection::solver::benchmark"],[209,"switch_selection::solver::cplex_solver"],[227,"switch_selection::solver::errors"],[243,"switch_selection::solver::tree_decomposition_solver"]],"d":["Data structure for primitive DG-graphs","Data structure for graphs and other relevant things","","Pretty alternative to <code>panic!(...)</code>","Pretty alternative to <code>...unwrap()</code>","Different solvers for the SwitchSelection problem","Primitive DG-graph","","","","Check the local feasibility of tap positions","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Get the junction network","Create a new primitive DG-graph","","","","","","","","","","","Edge data","Graph","Functions that cannot mutate a graph","A wrapper for special (user-defined) classes of immutable â€¦","Functions that can mutate a graph","Vertex data","Type of vertex IDs","","","","Add a new edge","","Add a new vertex","","Graph attributes","","","","","","","","","","Check the existence of an edge","","","","","","","","Get the number of connected components","","Contract vertices","","Get vertex degree","","Get vertex in-degree","","Get vertex out-degree","","","Get the number of edges","","","Errors","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Access an edge","","Access an edge satisfying a condition","","Access an edge","","Access a vertex","","Get vertex children","","Access a vertex satisfying a condition","","Access a vertex","","Get vertex neighbourhood","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Input/output","Edge type","Iterate over edges","","Iterate over edges","","Iterate over vertices","","Iterate over vertices","","","Create a new graph","","","Remove edge","","Remove vertex","","","","","Tree decompositions","","","","","","","","","","","Unwrap the wrapper","Get the number of vertices","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Graph error","","","","","","Returns the argument unchanged.","Create an error","Create an error","Calls <code>U::from(self)</code>.","","","","","","","GNBS files","","","","","","","","","","","Process attribute value","Read graph from GNBS file","Write graph into GNBS file","Tree decomposition","Construct a tree decomposition","Basic solver functionality","Benchmarking","CPLEXSolver","Errors","TreeDecompositionSolver","Basic functionality of any SwitchSelection solver","Value of tap position","Retrieve an optimal solution","Solve the problem","Create a new solver","Pseudo-random number generator","Generate a random partial k-tree","Initiate the benchmark","Run the solver multiple times","CPLEXSolver","Internal part of the solver","Additional functionality for the CPLEXSolver","","","Propagate CPLEX errors","","Returns the argument unchanged.","Get a mutable reference to the CPLEX problem instance","","Calls <code>U::from(self)</code>.","","","","","","","","Solver error","","","","","","Returns the argument unchanged.","Create an error","Create an error","Calls <code>U::from(self)</code>.","","","","","","","Directed tree decomposition","Memo","Memo entry","Data related to one thread","TreeDecompositionSolver","","","","","","","","","","","","","","","","","","","Get a DFS post-ordering","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the root ID","","","","Intersect two memos","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a directed tree decomposition","Create a new memo","","","","","","","Workload for a single compute thread","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,13,14,8,45,8,45,8,0,13,14,8,13,14,8,13,14,8,46,8,13,14,8,13,14,8,46,8,45,8,46,8,46,8,46,8,14,46,8,8,0,13,14,8,46,8,46,8,45,8,46,8,46,8,46,8,45,8,46,8,13,14,8,0,14,46,8,45,8,46,8,45,8,8,8,8,8,45,8,45,8,13,14,8,0,8,13,14,8,13,14,8,13,14,8,47,46,8,8,13,14,8,8,0,0,20,20,20,20,20,20,20,23,23,20,20,20,20,20,23,20,20,20,20,20,20,20,20,20,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,48,48,0,49,0,0,0,0,0,0,0,33,33,33,0,0,0,0,0,0,0,50,50,0,50,50,51,50,50,50,50,50,50,50,50,50,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,0,36,37,52,38,52,40,36,37,38,52,40,36,37,36,37,36,37,38,38,40,36,36,38,52,40,36,37,38,40,36,40,37,38,52,40,36,37,52,40,38,37,36,37,40,37,36,40,40,36,37,38,52,40,36,37,38,52,40,36,37,52,38,52,40,36,37,38,38,52,40,36,37,40],"f":[0,0,[[]],0,0,0,0,[1],[[]],[[]],[[2,[5,[3,4]]],[[7,[6]]]],[2,2],[[]],0,[[]],[[]],[2,8],[8,[[10,[2,9]]]],0,0,0,[[]],[[],10],[[],10],[[],11],[2,8],[[]],0,0,0,0,0,0,0,0,[1],[1],[1],[[3,3,12]],[[8,3,3,12]],[[[7,[3]]],3],[[8,[7,[3]]],3],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[3,3],[[7,[4]]]],[[8,3,3],[[7,[4]]]],[13,13],[14,14],[8,8],[[]],[[]],[[]],[[],15],[8,15],[[3,3,12]],[[8,3,3,12]],[3,[[7,[15]]]],[[8,3],[[7,[15]]]],[3,[[7,[15]]]],[[8,3],[[7,[15]]]],[3,[[7,[15]]]],[[8,3],[[7,[15]]]],0,[[],15],[8,15],0,0,[[]],[[]],[[]],[[3,3],[[7,[14]]]],[[8,3,3],[[7,[14]]]],[16,7],[[8,16],7],[[3,3],[[7,[14]]]],[[8,3,3],[[7,[14]]]],[3,[[7,[13]]]],[[8,3],[[7,[13]]]],[3,[[7,[[6,[3]]]]]],[[8,3],[[7,[[6,[3]]]]]],[16,7],[[8,16],7],[3,[[7,[13]]]],[[8,3],[[7,[13]]]],[3,[[7,[[6,[3]]]]]],[[8,3],[[7,[[6,[3]]]]]],[[]],[[]],[[]],0,[14,12],[[],[[17,[14]]]],[8,[[17,[14]]]],[[],[[18,[14]]]],[8,[[18,[14]]]],[[],[[17,[3,13]]]],[8,[[17,[3,13]]]],[[],[[18,[3,13]]]],[8,[[18,[3,13]]]],0,[[],8],0,[[8,19],[[10,[9]]]],[[3,3],[[7,[14]]]],[[8,3,3],[[7,[14]]]],[3,[[7,[13]]]],[[8,3],[[7,[13]]]],[[]],[[]],[[]],0,[8,[[10,[8,9]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],8],[[],15],[8,15],0,[[]],[[]],[[]],[[8,19],[[10,[9]]]],0,0,[1],[[20,[22,[21]],23]],[[]],[[]],[20,20],[[]],[[20,21],12],[23,[[7,[24]]]],[23,[[7,[24]]]],[[]],[[20,[22,[21]]],[[7,[23]]]],[[20,21],[[7,[23]]]],[[20,25],[[7,[23]]]],[[]],[23,12],[20,[[17,[21,[26,[23]]]]]],0,[[],20],[[20,21]],[[]],[[],10],[[],10],[[],11],[[]],0,[[]],[[]],0,[[9,27],28],[[9,27],28],[[]],[25,9],[21,9],[[]],[29],[[],21],[[],10],[[],10],[[],11],[[]],0,0,0,0,0,0,0,0,0,0,0,[[20,25,15],[[10,[9]]]],[19,[[10,[9]]]],[19,[[10,[9]]]],0,[[],[[10,[8,9]]]],0,0,0,0,0,0,0,[[],7],[[],[[10,[30]]]],[2,[[10,[30]]]],0,[[31,31,32],8],[[31,31,31,31,31,31],[[10,[30]]]],[[33,31,31],[[10,[34,30]]]],0,0,0,[[]],[[]],0,0,[[]],[[],35],0,[[]],0,0,[[],10],[[],10],[[],11],0,[[]],0,[[]],[[]],0,[[30,27],28],[[30,27],28],[[]],[25,30],[21,30],[[]],[29],[[],21],[[],10],[[],10],[[],11],[[]],0,0,0,0,0,[1],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,36],[37,37],[[]],[[]],0,[38,[[39,[3]]]],0,[[36,36],12],[[],12],[[]],[[]],[[]],[[]],[[]],[38,3],[40,7],[[36,41]],0,[[37,37]],[[]],[[]],[[]],[[]],[[]],0,0,[8,[[10,[38,30]]]],[[[39,[3]]],37],0,0,[40,[[10,[30]]]],0,0,0,[[[42,[2]],[42,[[43,[[5,[3,37]]]]]],[42,[38]],3,[44,[3]]],[[10,[30]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,[[],11],[[],11],[[],11],[[],11],[[],11],[38,8],[[]],[[]],[[]],[[]],[[]],[2,[[10,[40,30]]]]],"c":[],"p":[[3,"Private"],[3,"PrimitiveDGGraph"],[15,"u64"],[15,"i8"],[3,"HashMap"],[3,"HashSet"],[4,"Option"],[3,"Graph"],[3,"GraphError"],[4,"Result"],[3,"TypeId"],[15,"bool"],[3,"Vertex"],[3,"Edge"],[15,"usize"],[8,"Fn"],[3,"Iter"],[3,"IterMut"],[3,"File"],[3,"AttributeMap"],[3,"String"],[8,"Into"],[8,"Attribute"],[8,"Any"],[15,"str"],[3,"Box"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"SolverError"],[15,"u8"],[3,"Xoroshiro128PlusPlus"],[8,"BaseSolver"],[15,"f64"],[3,"Problem"],[3,"TapsMemoEntry"],[3,"TapsMemo"],[3,"DirectedTreeDecomposition"],[3,"Vec"],[3,"TreeDecompositionSolver"],[8,"Hasher"],[3,"Arc"],[3,"Mutex"],[3,"Receiver"],[8,"MutableGraph"],[8,"ImmutableGraph"],[8,"ImmutableGraphWrapper"],[8,"GNBS"],[8,"TreeDecomposition"],[3,"CPLEXSolverCore"],[8,"CPLEXSolverTools"],[3,"ThreadData"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
